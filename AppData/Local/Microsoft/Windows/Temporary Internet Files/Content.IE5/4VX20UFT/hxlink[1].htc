<PUBLIC:COMPONENT NAME="HxLink" URN="ms-help://hx/hxruntime/hxlink.htc" lightWeight="true">

// Exposed methods
<PUBLIC:METHOD NAME="Click"/>

// Exposed properties
<PUBLIC:PROPERTY NAME="keywords"/>
<PUBLIC:PROPERTY NAME="namespace"/>
<PUBLIC:PROPERTY NAME="errorURL"/>
<PUBLIC:PROPERTY NAME="indexMoniker"/>
<PUBLIC:PROPERTY NAME="filterName"/>
<PUBLIC:PROPERTY NAME="filterString"/>
<PUBLIC:PROPERTY NAME="options"/>
<PUBLIC:PROPERTY NAME="disambiguator"/>
<PUBLIC:PROPERTY NAME="hoverColor"/>

// Events we need for highlighting and activation
<PUBLIC:ATTACH EVENT="onmouseover" ONEVENT="HoverOn()"/>
<PUBLIC:ATTACH EVENT="onmouseout"  ONEVENT="HoverOff()"/>
<PUBLIC:ATTACH EVENT="onclick"     ONEVENT="Click()"/>
<PUBLIC:ATTACH EVENT="onkeypress"  ONEVENT="KeyPress()"/>

// Events we need for initialization
<PUBLIC:ATTACH EVENT="oncontentready" FOR="element" ONEVENT="InitLink()"/>

<SCRIPT LANGUAGE="JScript">

// Localize these strings:
var g_strLocation = "Location";
var g_strTopic = "Topic";

// Do not localize these strings:

var g_strProtocol = "ms-help:";
var g_strDoubleSlash = "//";
var g_strProtoPrefix = g_strProtocol + g_strDoubleSlash;
var g_strNavFailPageURL = "ms-help://Hx/HxRuntime/NavFailPage.htm";
var g_strNavFailPage = "NavFailPage";
var g_strNamedURLMoniker = "!DefaultNamedUrlIndex";
var g_strRawKeywords = "";

//
// InitLink() - Initialize the link. This method is called once for each link on the page.
//
function InitLink()
{
  //
  // initialize the properties
  //

  // The following properties can be set as styles

  if (hoverColor == null) {
    hoverColor = element.currentStyle.hoverColor;
    // default is same as non-hover color
    if (hoverColor == null) hoverColor = style.color; 
  }
  if (errorURL == null) {
    // see if it's set as an expando style
    errorURL = element.currentStyle.errorURL;
    // If it's still not set, we'll try the NavFailPage named URL in ShowErrorTopic
  }
  if (disambiguator == null) {
    // see if it's set as an expando style
    disambiguator = element.currentStyle.disambiguator;
    // default is menu
    if (disambiguator == null) disambiguator = "menu";
  }

  // The following properties cannot be set as styles

  if (indexMoniker == null)	indexMoniker = "!DefaultAssociativeIndex";
  if (options == null)		options = 0;
  if (namespace == null)	namespace = GetCurrentNamespace();	

  // Prepend protocol if namespace doesn't already have it.
  if (namespace.substr(0, g_strProtoPrefix.length) != g_strProtoPrefix) {
    namespace = g_strProtoPrefix + namespace;
  }

  // filterString can also be set as a style

  // filterString always overrides filterName, so if filterString is not null, we'll use that
  if (filterString == null) {
    // see if it's set as an expando style
    filterString = element.currentStyle.filterString;
    if (filterString == null) {
      // Can only use filterName if namespace not null
      if (filterName == null) {
        // see if it's set as an expando style
        filterName = element.currentStyle.filterName;
      }
    }
  }  

  // initialize styles that are not overrideable
  runtimeStyle.cursor = "hand";
}

function GetCurrentNamespace() 
{
  var ns = "";
  var loc = window.location;
  
  if (loc.protocol == g_strProtocol) {
    // Note: On IE 5.5,
    //  for "ms-help://foo/bar/phroid.htm", the hostname is "foo"
    // and the pathname is "/bar/phroid.htm"
    // we just want the hostname
    // On IE 5.0,
    //  for "ms-help://foo/bar/phroid.htm", the hostname is "//foo"
    ns = loc.hostname;
    // handle the IE 5.0 case
    if (ns.substr(0, g_strDoubleSlash.length) == g_strDoubleSlash) {
      ns = ns.substr(2);
    }
  }
  
  return ns;
}

function HoverOn()
{
  runtimeStyle.color = hoverColor;
  window.status = element.innerText;
}

function HoverOff()
{
  runtimeStyle.color  = style.color;
  window.status = "";
}

function KeyPress()
{
  // Enter key same as click for accessibility
  if (window.event.keyCode == 13) {	
    Click();
    window.event.returnValue = false;
  }
}

function Click()
{
  try {
  // Make sure we have the required bits of information
  if (namespace != null && keywords != null) {
    // Set wait cursor
    window.document.body.runtimeStyle.cursor = "wait";
    element.runtimeStyle.cursor = "wait";
    // Instantiate a session
    var session = new ActiveXObject("HxDs.HxSession");
    if (session != null) {
      try {
        session.Initialize(namespace, 0);
      }
      catch (e) {
        session = null;
      }
      if (session != null) {

        // Now try to get the filter expression from the filter name if we have one
        try {
            if (filterString == null && filterName != null) {
              var filterList = session.GetFilterList();
              if (filterList != null) {
                var filter = filterList.FindFilter(filterName);
                if (filter != null) {
                  // cannot use symbolic name HxRegFilterQuery.
                  filterString = filter.GetProperty(1 /*HxDs.HxRegFilterQuery*/);
                }
              }
            }
        }
        catch (e) {
          // It's almost certainly already null, but we want to fall through
          filterString = null;
        }

        // if filterString is *still* null... 
        if (filterString == null) {
          var hh = null;
          try {
            hh = window.external.HelpHost;
          }
          catch (e) {
            hh = null;
          }
          if (hh != null) {
            filterString = hh.FilterExpression;
          }
          filterString = "";	// never leave it as null; use the empty string	
        }

        var keyString ;
        // Use a regular expression to strip whitespace from both ends of the string
        var re = /^\s*|\s*$/g ;     // g for global, m for multiline (in case there are newlines)
        keywords = keywords.replace(re, "");
        // save the raw keywords before newline/tab replacement for error handling
        g_strRawKeywords = new String(keywords); // make a copy, not a reference
        // replace , and surrounding spaces with tab
        re = /\s*,\s*/g ;
        keywords = keywords.replace(re, "\t");
        // replace ; and surrounding spaces with newline
        re = /\s*;\s*/g ;
        keywords = keywords.replace(re, "\n");
        
        //commas and semicolons are valid in keywords IF they are encoded.  Now that we have translated
        //non-encoded , and ; unescape will decode the encoded characters.
        keywords = unescape(keywords) ;
        try {
            var topics = session.Query(keywords, indexMoniker, options, filterString);
            // Restore normal cursor
            window.document.body.runtimeStyle.cursor = "auto";
            element.runtimeStyle.cursor = "hand";
            
            if (topics != null) {
                  if (topics.Count == 0) {
                ShowErrorTopic(session);
              }
              else if (topics.Count == 1) {
                // Just one topic, go there.
                window.navigate(topics.Item(1).URL);
              }
              else {
                if (disambiguator == "menu") ShowMenu(topics);
                else ShowTable(topics);
              }
              if (window.event != null) window.event.returnValue = false;
              return;
            }
        } catch (e) {
              window.document.body.runtimeStyle.cursor = "auto";
              element.runtimeStyle.cursor = "hand";
              ShowErrorTopic(session);
              if (window.event != null) window.event.returnValue = false;  
              return ;
        }

      }
    }
  }

  window.document.body.runtimeStyle.cursor = "auto";
  element.runtimeStyle.cursor = "hand";

  // If we got here, we didn't find a topic
  ShowErrorTopic(session);
  if (window.event != null) window.event.returnValue = false;  
  }
  catch (e)
  {
     ShowErrorTopic(session);
  }
}


// Find (if necessary) and show the navigation failure page.
function ShowErrorTopic(session) 
{
  // Check for error URL again now that we (might) have a session
  if (errorURL == null) {
    // look for named URL if we have a session
    if (session != null) {
      try {
        var topics = session.Query(g_strNavFailPage, g_strNamedURLMoniker, 0, "");
      } catch(e) {
        errorURL = g_strNavFailPageURL
      }
      if (topics != null) {
        if (topics.Count > 0) {
          errorURL = topics.Item(1).URL;
        }
      }
    }
    // use final default if necessary
    if (errorURL == null) errorURL = g_strNavFailPageURL;
  }

  // Okay, now go there
  var str = errorURL + '?keywords="' + g_strRawKeywords + '"'

  // Okay, now go there
  
  if (errorURL.indexOf(":") == -1)
  { 
    //no colon means we have a realitve URL.  Prepend the protocol, host, pathname of hte current page.
    
    // 1.  Place components of URLs into their own String objects
    var wdlProtocol = window.document.location.protocol ;
    var wdlHost = window.document.location.host  ;
    var wdlPathName = window.document.location.pathname ; 
    
    // 2.  Clip the filename out of wdlPathName 
    pathEnd = wdlPathName.lastIndexOf("/") ;
    var Path = wdlPathName.substr(0,pathEnd+1) ;
    
    // 3.  Build navPath from the URL components    
    var navPath = wdlProtocol +"//"+ wdlHost + Path +  str ;
    
    // 4.  Navigate 
    window.navigate(navPath) ;
  } else {
    // colon means we have an absolute URL.  navigate directly.
    window.navigate(str) ;
  }
}


// ShowMenu - Display the disambiguation list a as a menu
function ShowMenu(topics)
{
  var oMenuDiv = window.document.createElement("DIV");
  oMenuDiv.className = "HxLinkMenu";
  oMenuDiv.setAttribute("itemCount", topics.Count, 1);

  // position the menu below the link
  oMenuDiv.runtimeStyle.posTop = element.offsetTop + element.offsetHeight ;
  // use link's offsetHeight as a horizontal indent
  oMenuDiv.runtimeStyle.posLeft = element.offsetLeft + element.offsetHeight ;

  var i;
  for (i = 1; i <= topics.Count; i++) {
    var topic = topics.Item(i);
    var oA = window.document.createElement("A");
    oA.className	= "HxLinkMenu";
    oA.href 		= topic.URL;
    oA.setAttribute("itemNumber", i, 1);	// used for later comparison
    oA.id		= "item" + i;
    oA.innerText 	= topic.Title(0,0) + " (" + topic.Location + ")";
    oMenuDiv.insertAdjacentElement("beforeEnd", oA);
  }
  insertAdjacentElement("afterEnd", oMenuDiv); 
}


// ShowTable - Show the disambiguation list as a table
function ShowTable(topics)
{
  // Try to make a unique ID
  var strID = element.innerText + "_" + keywords;
  // convert illegal characters to "_"
  var re = /\W/g ;
  strID = strID.replace(re, "_");

  // If the table is already showing, we should hide instead
  var o = window.document.all[strID];
  if (o != null) {
    o.removeNode(true);
    return; // our work is done
  }

  // Create a DIV into which we'll place the table
  var oTableDiv = window.document.createElement("DIV");
  oTableDiv.id = strID;
  oTableDiv.className = "HxLinkTable";
  oTableDiv.runtimeStyle.marginLeft = element.offsetHeight + "px";
  oTableDiv.setAttribute("itemCount", topics.Count, 1);

  // Create the table
  var oTable = window.document.createElement("TABLE");
  oTable.className = "HxLinkTable";
  oTable.cellSpacing = 0;

  // Create the table header.
  var oTHead = window.document.createElement("THEAD");
  var oTR = window.document.createElement("TR");
  oTR.vAlign = "top";
  var oTH = window.document.createElement("TH");
  oTH.innerText = g_strTopic;
  oTR.insertAdjacentElement("beforeEnd", oTH);
  oTH = window.document.createElement("TH");
  oTH.innerText = g_strLocation;
  oTR.insertAdjacentElement("beforeEnd", oTH);
  oTHead.insertAdjacentElement("beforeEnd", oTR);

  // Add the header into the table
  oTable.insertAdjacentElement("beforeEnd", oTHead);

  // Create the table body. Note that if we don't explicitly define a TBODY, 
  // the table comes out invisible for some reason
  var oTBody = window.document.createElement("TBODY");

  // Now create and add each row in the table
  for (i = 1; i <= topics.Count; i++) {
    var topic = topics.Item(i);
    // create the row
    var oTR = window.document.createElement("TR");
    oTR.vAlign = "top";
    // first column is a link to the topic
    var oTD = window.document.createElement("TD");
    var oA = window.document.createElement("A");
    oA.className    = "HxLinkTable";
    oA.href         = topic.URL;
    oA.innerText    = topic.Title(0,0);
    oTD.insertAdjacentElement("beforeEnd", oA);
    oTR.insertAdjacentElement("beforeEnd", oTD);
    // second column is the location
    oTD = null;
    oTD = window.document.createElement("TD");
    oTD.innerText = topic.Location;
    oTR.insertAdjacentElement("beforeEnd", oTD);
    // put the row in the TBODY
    oTBody.insertAdjacentElement("beforeEnd", oTR);
  }
  // Put the TBODY into the Table
  oTable.insertAdjacentElement("beforeEnd", oTBody);
  // shove the table into the div, then insert the div after the link
  oTableDiv.insertAdjacentElement("afterBegin", oTable);
  element.insertAdjacentElement("afterEnd", oTableDiv); 
}


</SCRIPT>
</PUBLIC:COMPONENT>

